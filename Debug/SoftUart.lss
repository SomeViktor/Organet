
SoftUart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000039e  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  0080010a  0080010a  0000043c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c7  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d8  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000221  00000000  00000000  00000a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026f  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000010d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 33       	cpi	r26, 0x39	; 57
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a0 01 	call	0x340	; 0x340 <main>
  9e:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
#define txbusy 0				// set if a byte is in transmission
#define rxbusy 1				// set if a byte is being received
#define rxframe 2				// set if the stop byte isn't a one

ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	29 97       	sbiw	r28, 0x09	; 9
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	cd bf       	out	0x3d, r28	; 61

	
	if(yeah){
  cc:	80 91 33 01 	lds	r24, 0x0133
  d0:	88 23       	and	r24, r24
  d2:	19 f0       	breq	.+6      	; 0xda <__vector_11+0x34>
		
		DDRB |= _BV(PINB3);
  d4:	23 9a       	sbi	0x04, 3	; 4
		PORTB |= _BV(PINB3);
  d6:	2b 9a       	sbi	0x05, 3	; 5
  d8:	01 c0       	rjmp	.+2      	; 0xdc <__vector_11+0x36>
		
	}
	else{
		PORTB &= ~_BV(PINB3);
  da:	2b 98       	cbi	0x05, 3	; 5
	// since it needs to be somewhere close to accurate...
	// then we read the incoming signal, if there is one,
	// and finally we update the nearly-real-time clock
	// (we never display the clock but it timestamps the output data)
	
	if (uart_status & _BV(txbusy))
  dc:	80 91 2c 01 	lds	r24, 0x012C
  e0:	80 ff       	sbrs	r24, 0
  e2:	3a c0       	rjmp	.+116    	; 0x158 <__vector_11+0xb2>
	{
		//yeah =1;
		// we're transmitting something
		// increment the tick - we only do things every four ticks
		uart_txtick++;
  e4:	80 91 30 01 	lds	r24, 0x0130
  e8:	8f 5f       	subi	r24, 0xFF	; 255
		if (uart_txtick == 4)
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	19 f0       	breq	.+6      	; 0xf4 <__vector_11+0x4e>
	if (uart_status & _BV(txbusy))
	{
		//yeah =1;
		// we're transmitting something
		// increment the tick - we only do things every four ticks
		uart_txtick++;
  ee:	80 93 30 01 	sts	0x0130, r24
  f2:	32 c0       	rjmp	.+100    	; 0x158 <__vector_11+0xb2>
		if (uart_txtick == 4)
		{
			// okay, we've work to do
			uart_txtick = 0;
  f4:	10 92 30 01 	sts	0x0130, r1
			
			// is it the start bit?
			if (uart_txbit == 0)
  f8:	80 91 2e 01 	lds	r24, 0x012E
  fc:	81 11       	cpse	r24, r1
  fe:	07 c0       	rjmp	.+14     	; 0x10e <__vector_11+0x68>
			{
				// yes...
				PORTD &= ~(_BV(uarttx));		// clear the start bit output
 100:	5b 98       	cbi	0x0b, 3	; 11
				uart_txbit++;
 102:	80 91 2e 01 	lds	r24, 0x012E
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 2e 01 	sts	0x012E, r24
 10c:	1a c0       	rjmp	.+52     	; 0x142 <__vector_11+0x9c>
			}
			else
			{
				if (uart_txbit != 9)
 10e:	89 30       	cpi	r24, 0x09	; 9
 110:	91 f0       	breq	.+36     	; 0x136 <__vector_11+0x90>
				{
					// deal with the data bits
					if (uart_txd & 1)		// low bit set?
 112:	80 91 31 01 	lds	r24, 0x0131
 116:	80 ff       	sbrs	r24, 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <__vector_11+0x78>
					PORTD |= _BV(uarttx);	// then set the data stream bit
 11a:	5b 9a       	sbi	0x0b, 3	; 11
 11c:	01 c0       	rjmp	.+2      	; 0x120 <__vector_11+0x7a>
					else
					PORTD &= ~(_BV(uarttx));
 11e:	5b 98       	cbi	0x0b, 3	; 11
					// or clear, as required
					uart_txbit++;				// increment the bit count
 120:	80 91 2e 01 	lds	r24, 0x012E
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 2e 01 	sts	0x012E, r24
					
					// and shift the data right
					uart_txd /= 2;
 12a:	80 91 31 01 	lds	r24, 0x0131
 12e:	86 95       	lsr	r24
 130:	80 93 31 01 	sts	0x0131, r24
 134:	06 c0       	rjmp	.+12     	; 0x142 <__vector_11+0x9c>
				}
				else
				{
					// deal with the stop bit
					PORTD |= _BV(uarttx);
 136:	5b 9a       	sbi	0x0b, 3	; 11
					uart_txbit++;
 138:	80 91 2e 01 	lds	r24, 0x012E
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 2e 01 	sts	0x012E, r24
					
				}
			}
			
			// and finally, if txbit is more than 9, we've done
			if (uart_txbit > 9)
 142:	80 91 2e 01 	lds	r24, 0x012E
 146:	8a 30       	cpi	r24, 0x0A	; 10
 148:	38 f0       	brcs	.+14     	; 0x158 <__vector_11+0xb2>
			{
				uart_txbit = 0;					// clear the bit counter
 14a:	10 92 2e 01 	sts	0x012E, r1
				uart_status &= ~(_BV(txbusy)); // and the busy status
 14e:	80 91 2c 01 	lds	r24, 0x012C
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	80 93 2c 01 	sts	0x012C, r24
	// if we're *not* yet receiving, we check every clock tick to see if the input
	// line has gone into a stop bit
	// if it has, we wait for half a bit period and then sample every four ticks
	// to put together the rx data

	uint8_t uart_bitpattern[9] = {0,1,2,4,8,16,32,64,128};
 158:	89 e0       	ldi	r24, 0x09	; 9
 15a:	e0 e0       	ldi	r30, 0x00	; 0
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	de 01       	movw	r26, r28
 160:	11 96       	adiw	r26, 0x01	; 1
 162:	01 90       	ld	r0, Z+
 164:	0d 92       	st	X+, r0
 166:	8a 95       	dec	r24
 168:	e1 f7       	brne	.-8      	; 0x162 <__vector_11+0xbc>

	if ((uart_status & _BV(rxbusy)) == 0)
 16a:	80 91 2c 01 	lds	r24, 0x012C
 16e:	81 fd       	sbrc	r24, 1
 170:	0b c0       	rjmp	.+22     	; 0x188 <__vector_11+0xe2>
		
		
		
		// we're idling
		// check to see if there's a start
		if ((PIND & _BV(uartrx)) == 0)
 172:	4a 99       	sbic	0x09, 2	; 9
 174:	4d c0       	rjmp	.+154    	; 0x210 <__vector_11+0x16a>
			
			
			
			// we found a start bit!
			// set the tick count to 2, so we get the sample near the middle of the bit
			uart_rxtick = 2;
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	90 93 2f 01 	sts	0x012F, r25
			// and flag that we're now busy
			uart_status |= _BV(rxbusy);
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	80 93 2c 01 	sts	0x012C, r24
			// we're expecting the start bit now...
			uart_rxbit = 0;
 182:	10 92 2d 01 	sts	0x012D, r1
 186:	44 c0       	rjmp	.+136    	; 0x210 <__vector_11+0x16a>
	else
	{
		
		// we're receiving something
		// inc the tick count
		uart_rxtick++;
 188:	90 91 2f 01 	lds	r25, 0x012F
 18c:	9f 5f       	subi	r25, 0xFF	; 255
		if (uart_rxtick == 4)
 18e:	94 30       	cpi	r25, 0x04	; 4
 190:	19 f0       	breq	.+6      	; 0x198 <__vector_11+0xf2>
	else
	{
		
		// we're receiving something
		// inc the tick count
		uart_rxtick++;
 192:	90 93 2f 01 	sts	0x012F, r25
 196:	3c c0       	rjmp	.+120    	; 0x210 <__vector_11+0x16a>
		if (uart_rxtick == 4)
		{
			// we only sample when the tick = 0
			uart_rxtick = 0;
 198:	10 92 2f 01 	sts	0x012F, r1
			
			// what we do depends on the bit count
			// 0 = start,
			// 1-8 = data
			// 9 = stop
			if (uart_rxbit == 0)
 19c:	90 91 2d 01 	lds	r25, 0x012D
 1a0:	91 11       	cpse	r25, r1
 1a2:	0c c0       	rjmp	.+24     	; 0x1bc <__vector_11+0x116>
			{
				
				// start bit
				// it had better be 0 or it was a line glitch
				if ((PIND & _BV(uartrx)) == 0)
 1a4:	4a 99       	sbic	0x09, 2	; 9
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <__vector_11+0x10e>
				{
					// it's a real start bit (probably) so deal with it
					// next bit will be data
					uart_rxbit ++;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 2d 01 	sts	0x012D, r24
					uart_rxd = 0;
 1ae:	10 92 32 01 	sts	0x0132, r1
 1b2:	2e c0       	rjmp	.+92     	; 0x210 <__vector_11+0x16a>
				}
				else
				{
					// bad start bit, flag us back as not busy
					uart_status |= ~(_BV(rxbusy));
 1b4:	8d 6f       	ori	r24, 0xFD	; 253
 1b6:	80 93 2c 01 	sts	0x012C, r24
 1ba:	2a c0       	rjmp	.+84     	; 0x210 <__vector_11+0x16a>
				}
			}
			else
			{
				if (uart_rxbit < 9)
 1bc:	99 30       	cpi	r25, 0x09	; 9
 1be:	78 f4       	brcc	.+30     	; 0x1de <__vector_11+0x138>
				{
					
					// data bit
					// if the data bit is a one, we add the bit value to the rxd value
					
					if (PIND & _BV(uartrx))
 1c0:	4a 9b       	sbis	0x09, 2	; 9
 1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <__vector_11+0x130>
					{
						uart_rxd += uart_bitpattern[uart_rxbit];
 1c4:	fe 01       	movw	r30, r28
 1c6:	e9 0f       	add	r30, r25
 1c8:	f1 1d       	adc	r31, r1
 1ca:	20 91 32 01 	lds	r18, 0x0132
 1ce:	81 81       	ldd	r24, Z+1	; 0x01
 1d0:	82 0f       	add	r24, r18
 1d2:	80 93 32 01 	sts	0x0132, r24
						
					}
					uart_rxbit ++;
 1d6:	9f 5f       	subi	r25, 0xFF	; 255
 1d8:	90 93 2d 01 	sts	0x012D, r25
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <__vector_11+0x16a>
				}
				else
				{
					if (uart_rxbit == 9)
 1de:	99 30       	cpi	r25, 0x09	; 9
 1e0:	21 f4       	brne	.+8      	; 0x1ea <__vector_11+0x144>
						
						// stop bit
						// we're going to assume it's a valid bit, though we could check for
						// framing error here, and simply use this bit to wait for the first
						// stop bit period
						uart_rxbit++;
 1e2:	8a e0       	ldi	r24, 0x0A	; 10
 1e4:	80 93 2d 01 	sts	0x012D, r24
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <__vector_11+0x16a>
						
						
						
						
						// finished, ready to start again
						uart_status &= ~(_BV(rxbusy));
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	80 93 2c 01 	sts	0x012C, r24
						// store the data into the buffer
						buffer2[next_write_2++] = uart_rxd;
 1f0:	e0 91 2a 01 	lds	r30, 0x012A
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	8e 0f       	add	r24, r30
 1f8:	80 93 2a 01 	sts	0x012A, r24
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e6 5f       	subi	r30, 0xF6	; 246
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	90 91 32 01 	lds	r25, 0x0132
 206:	90 83       	st	Z, r25
						if(uart_rxd == 0xF0){
							
						}
						if (next_write_2 == BUFFERSIZE)
 208:	80 32       	cpi	r24, 0x20	; 32
 20a:	11 f4       	brne	.+4      	; 0x210 <__vector_11+0x16a>
						next_write_2 = 0;
 20c:	10 92 2a 01 	sts	0x012A, r1
	}
	
	
	
	// increment the clock
	ticks++;
 210:	80 91 38 01 	lds	r24, 0x0138
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 38 01 	sts	0x0138, r24
	if (ticks == 192)
 21a:	80 91 38 01 	lds	r24, 0x0138
 21e:	80 3c       	cpi	r24, 0xC0	; 192
 220:	71 f5       	brne	.+92     	; 0x27e <__vector_11+0x1d8>
	{
		ticks = 0;
 222:	10 92 38 01 	sts	0x0138, r1
		fiftieths++;
 226:	80 91 37 01 	lds	r24, 0x0137
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 93 37 01 	sts	0x0137, r24
		if (fiftieths == 40)
 230:	80 91 37 01 	lds	r24, 0x0137
 234:	88 32       	cpi	r24, 0x28	; 40
 236:	09 f4       	brne	.+2      	; 0x23a <__vector_11+0x194>
		{
			// turn led on
			PORTD |= 0x80;
 238:	5f 9a       	sbi	0x0b, 7	; 11
		}
		if (fiftieths == 50)
 23a:	80 91 37 01 	lds	r24, 0x0137
 23e:	82 33       	cpi	r24, 0x32	; 50
 240:	f1 f4       	brne	.+60     	; 0x27e <__vector_11+0x1d8>
		{
			// turn led off
			PORTD &= 0x7f;
 242:	5f 98       	cbi	0x0b, 7	; 11
			
			fiftieths = 0;
 244:	10 92 37 01 	sts	0x0137, r1
			seconds++;
 248:	80 91 36 01 	lds	r24, 0x0136
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 36 01 	sts	0x0136, r24
			if (seconds == 60)
 252:	80 91 36 01 	lds	r24, 0x0136
 256:	8c 33       	cpi	r24, 0x3C	; 60
 258:	91 f4       	brne	.+36     	; 0x27e <__vector_11+0x1d8>
			{
				seconds = 0;
 25a:	10 92 36 01 	sts	0x0136, r1
				minutes ++;
 25e:	80 91 35 01 	lds	r24, 0x0135
 262:	8f 5f       	subi	r24, 0xFF	; 255
 264:	80 93 35 01 	sts	0x0135, r24
				if (minutes == 60)
 268:	80 91 35 01 	lds	r24, 0x0135
 26c:	8c 33       	cpi	r24, 0x3C	; 60
 26e:	39 f4       	brne	.+14     	; 0x27e <__vector_11+0x1d8>
				{
					minutes = 0;
 270:	10 92 35 01 	sts	0x0135, r1
					hours++;
 274:	80 91 34 01 	lds	r24, 0x0134
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	80 93 34 01 	sts	0x0134, r24
	}
	
	


}
 27e:	29 96       	adiw	r28, 0x09	; 9
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <ser2_init>:

void ser2_init (void)
{
	// we wake up the timer, preset the clock and uart variables, and enable the ocr1a interrupt
	ticks = 0;
 2a6:	10 92 38 01 	sts	0x0138, r1
	fiftieths = 0;
 2aa:	10 92 37 01 	sts	0x0137, r1
	seconds = 0;
 2ae:	10 92 36 01 	sts	0x0136, r1
	minutes = 0;
 2b2:	10 92 35 01 	sts	0x0135, r1
	hours = 0;
 2b6:	10 92 34 01 	sts	0x0134, r1



	
	TCCR1B = 0;					//resetting TCCR1B.
 2ba:	e1 e8       	ldi	r30, 0x81	; 129
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	10 82       	st	Z, r1
	TCCR1B |= _BV(CS10);		//clock enabled, prescaling = 1
 2c0:	80 81       	ld	r24, Z
 2c2:	81 60       	ori	r24, 0x01	; 1
 2c4:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM12);		// ctc mode is enabled
 2c6:	80 81       	ld	r24, Z
 2c8:	88 60       	ori	r24, 0x08	; 8
 2ca:	80 83       	st	Z, r24
	TCCR1A = 0;					//nothing special is used.
 2cc:	10 92 80 00 	sts	0x0080, r1
	//OCR1A = 0x341;
	OCR1AH = 0x03;
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0x41;	
 2d6:	81 e4       	ldi	r24, 0x41	; 65
 2d8:	80 93 88 00 	sts	0x0088, r24
		
					//Timer Compare value b is set. Not the final value.
	
	
	TIMSK1 |= _BV(OCIE1A);		//Timer/Counter Compare Match is enabled.
 2dc:	ef e6       	ldi	r30, 0x6F	; 111
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	80 83       	st	Z, r24
	//OCR1AL = (0x41);			// preset compare counter to 833

	//timer_enable_int(_BV(OCIE1A));
	// allow interrupts on output mask a
	
	next_read_2 = 0;
 2e6:	10 92 2b 01 	sts	0x012B, r1
	next_write_2 = 0;			// set up the buffer pointers
 2ea:	10 92 2a 01 	sts	0x012A, r1
	
	uart_status = 0;			// nothing happening either tx or rx
 2ee:	10 92 2c 01 	sts	0x012C, r1
	//DDRD = 0;
	DDRD = _BV(uarttx);		// and set the input and output pins
 2f2:	88 e0       	ldi	r24, 0x08	; 8
 2f4:	8a b9       	out	0x0a, r24	; 10
	
	PORTD = _BV(uarttx);		// we're not using port d for anything else and
 2f6:	8b b9       	out	0x0b, r24	; 11
	PORTD |= _BV(uartrx);							// the usart overrides the pin directions anyway
 2f8:	5a 9a       	sbi	0x0b, 2	; 11
 2fa:	08 95       	ret

000002fc <ser2_out>:
void ser2_out (char ch)
{
	// output the character to the software serial port, waiting until the output
	// buffer is available
	
	while ((uart_status & _BV(txbusy)) == 1);		// wait...
 2fc:	90 91 2c 01 	lds	r25, 0x012C
 300:	90 fd       	sbrc	r25, 0
 302:	ff cf       	rjmp	.-2      	; 0x302 <ser2_out+0x6>
	{
		// once the system isn't busy...
		// load the register
		uart_txd = ch;
 304:	80 93 31 01 	sts	0x0131, r24
		
		// and tell it there's something to send
		uart_status |= _BV(txbusy);
 308:	91 60       	ori	r25, 0x01	; 1
 30a:	90 93 2c 01 	sts	0x012C, r25
 30e:	08 95       	ret

00000310 <ser2_ischar>:
{
	// returns true if there is a character available from the soft uart
	// false if there is nothing waiting
	// call ser2_in after this to retrieve the data
	
	if (next_read_2 != next_write_2)
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	20 91 2b 01 	lds	r18, 0x012B
 316:	90 91 2a 01 	lds	r25, 0x012A
 31a:	29 13       	cpse	r18, r25
 31c:	01 c0       	rjmp	.+2      	; 0x320 <ser2_ischar+0x10>
 31e:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
	else
	return 0;
}
 320:	08 95       	ret

00000322 <ser2_in>:
	// return a character from the soft uart
	// do *not* call without first testing with ser2_ischar as it modifies the
	// next_read pointer
	
	char ch;
	ch = buffer2[next_read_2++];
 322:	e0 91 2b 01 	lds	r30, 0x012B
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	9e 0f       	add	r25, r30
 32a:	90 93 2b 01 	sts	0x012B, r25
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	e6 5f       	subi	r30, 0xF6	; 246
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	80 81       	ld	r24, Z
	if (next_read_2 == BUFFERSIZE)
 336:	90 32       	cpi	r25, 0x20	; 32
 338:	11 f4       	brne	.+4      	; 0x33e <ser2_in+0x1c>
	next_read_2 = 0;
 33a:	10 92 2b 01 	sts	0x012B, r1
	return ch;
}
 33e:	08 95       	ret

00000340 <main>:



int main(void)
{
	ser2_init();
 340:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ser2_init>
	
	
											//FLASHSLFYKX
	DDRB |= _BV(PINB4); // (1<<PINB4)
 344:	24 9a       	sbi	0x04, 4	; 4
	PORTB = 0;
 346:	15 b8       	out	0x05, r1	; 5
	PINB |= _BV(PINB4);
 348:	1c 9a       	sbi	0x03, 4	; 3
	sei();
 34a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	89 e6       	ldi	r24, 0x69	; 105
 350:	98 e1       	ldi	r25, 0x18	; 24
 352:	21 50       	subi	r18, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x12>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x1c>
 35c:	00 00       	nop
	_delay_ms(500);
	DDRB |= _BV(PINB2);
 35e:	22 9a       	sbi	0x04, 2	; 4
		PORTB &= ~_BV(PINB2);
		
		
		if(ser2_ischar()){
			char a = ser2_in();
			yeah= 1;
 360:	c1 e0       	ldi	r28, 0x01	; 1
	DDRB |= _BV(PINB2);
	
	while(1)
	{
		
		ser2_out('0');
 362:	80 e3       	ldi	r24, 0x30	; 48
 364:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ser2_out>
		PORTB &= ~_BV(PINB2);
 368:	2a 98       	cbi	0x05, 2	; 5
		
		
		if(ser2_ischar()){
 36a:	0e 94 88 01 	call	0x310	; 0x310 <ser2_ischar>
 36e:	88 23       	and	r24, r24
 370:	81 f0       	breq	.+32     	; 0x392 <main+0x52>
			char a = ser2_in();
 372:	0e 94 91 01 	call	0x322	; 0x322 <ser2_in>
			yeah= 1;
 376:	c0 93 33 01 	sts	0x0133, r28
			
			
			ser2_out(a+1);
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ser2_out>
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	81 ee       	ldi	r24, 0xE1	; 225
 384:	94 e0       	ldi	r25, 0x04	; 4
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x46>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x50>
 390:	00 00       	nop
			_delay_ms(100);
			
		}
		
		PORTB |= _BV(PINB2);
 392:	2a 9a       	sbi	0x05, 2	; 5
		
		yeah = 0;	
 394:	10 92 33 01 	sts	0x0133, r1
		
		
		
		
		
	}
 398:	e4 cf       	rjmp	.-56     	; 0x362 <main+0x22>

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
